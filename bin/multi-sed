#!/usr/bin/env python3

import argparse
import glob
import os
import re
import sys
import stat

def is_binary(file_path):
    with open(file_path, "rb") as file:
        chunk = file.read(4096)
        return b"\0" in chunk

def is_hidden(path):
    """Check if a file or directory is hidden (cross-platform)."""
    basename = os.path.basename(path)
    if basename.startswith("."):
        return True

    try:
        if sys.platform == "win32":
            attributes = os.stat(path).st_file_attributes
            return bool(attributes & stat.FILE_ATTRIBUTE_HIDDEN)
        elif sys.platform == "darwin":
            import Foundation
            url = Foundation.NSURL.fileURLWithPath_(path)
            return url.getResourceValue_forKey_error_(
                None, Foundation.NSURLIsHiddenKey, None)[1]
        else:
            return False
    except:
        return False

def find_and_replace(pattern, replacement, file_path,
                     multiline=False, include_hidden=False):
    if not include_hidden and is_hidden(file_path):
        return

    if is_binary(file_path):
        return

    try:
        with open(file_path, "r") as file:
            content = file.read()

        flags = re.MULTILINE if multiline else 0
        new_content = re.sub(pattern, replacement, content, flags=flags)

        if new_content != content:
            with open(file_path, "w") as file:
                file.write(new_content)
            print(f"Modified: {file_path}")
    except UnicodeDecodeError:
        pass  # Silently skip files that can't be decoded as UTF-8
    except Exception as e:
        print(f"Error processing {file_path}: {str(e)}")

def process_directory(pattern, replacement, directory,
                      multiline=False, include_hidden=False):
    for root, dirs, files in os.walk(directory):
        if (not include_hidden and
            any((is_hidden(os.path.join(root, d)) for d in dirs))):
            continue

        for file in files:
            file_path = os.path.join(root, file)
            find_and_replace(pattern, replacement, file_path,
                             multiline=multiline, include_hidden=include_hidden)

def main():
    parser = argparse.ArgumentParser(
            description="Find and replace all occurrences in place, "
                        "across multiple files")

    parser.add_argument("old_pattern", help="Pattern to find")
    parser.add_argument("new_pattern", help="Pattern to replace with")
    parser.add_argument("files", nargs="*", default=["."],
                        help="Files or directories to process")
    parser.add_argument("-m", "--multiline", action="store_true",
                        help="Enable multi-line find-and-replace")
    parser.add_argument("-g", "--glob", action="store_true",
                        help="Use Python's glob module for file matching")
    parser.add_argument("--include-hidden", action="store_true",
                        help="Include hidden files and directories")

    args = parser.parse_args()

    if args.glob:
        file_list = []
        for path in args.files:
            if os.path.isdir(path):
                file_list.append(path)
            else:
                file_list.extend(glob.glob(path, recursive=True))
    else:
        file_list = args.files

    for path in file_list:
        if os.path.isfile(path):
            find_and_replace(args.old_pattern, args.new_pattern, path,
                             args.multiline, args.include_hidden)
        elif os.path.isdir(path):
            process_directory(args.old_pattern, args.new_pattern, path,
                              args.multiline, args.include_hidden)
        else:
            print(f"Skipping: {path} (not a file or directory)")

if __name__ == "__main__":
    main()
